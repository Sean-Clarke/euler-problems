import math

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number
# to have over five divisors.

# What is the value of the first triangle number
# to have over five hundred divisors?


# Solution 1:
# -----------
#
# triangle = 3
# add = 3
# count = 2
#
# while count <= 500:
#     count = 1
#     triangle += add
#     add += 1
#     if triangle % 2 == 0:
#         count += 1
#         if triangle % 4 == 0:
#             count += 1
#             if triangle % 8 == 0:
#                 count += 1
#         if triangle % 6 == 0:
#             count += 1
#     if triangle % 3 == 0:
#         count += 1
#         if triangle % 9 == 0:
#             count += 1
#     if triangle % 5 == 0:
#         count += 1
#         if triangle % 10 == 0:
#             count += 1
#     if triangle % 7 == 0:
#         count += 1
#     for i in range(1, int(triangle / 11) + 1):
#         if triangle % i == 0:
#             count += 1
# 
# print(triangle)


# Solution 2:
# -----------
#
# list_of_primes = [2, 3]
# prime_factor = {}
# triangle = 6
# copy = triangle
# add = 4
# count = 2
# last_prime = 3
#
#
# def next_prime(i):
#     found = False
#     while found == False:
#         i += 2
#         stop = False
#         for n in list_of_primes:
#             if i % n == 0:
#                 stop = True
#                 break
#         if stop == False:
#             found = True
#     return i
#
# while count <= 500:
#     triangle += add
#     add += 1
#     while (last_prime < int(triangle / 2)):
#         last_prime = next_prime(last_prime)
#         list_of_primes.append(last_prime)
#     copy = triangle
#     prime_factor = {}
#     for n in list_of_primes:
#         exp = 0
#         while copy % n == 0:
#             exp += 1
#             copy /= n
#         if exp >= 1:
#             prime_factor[n] = exp
#     count = 1
#     for k,v in sorted(prime_factor.items()):
#         count *= (v + 1)
#    
# print(triangle)
            

# Solution 3:
# -----------

divisors = 500
count = 1
primes = [2, 3]
last_prime = 3
prime_factors = {}

def inc_factor(p):
    prime_factors[p] = (prime_factors[p] + 1)

def next_prime(i):
    found = False
    while found == False:
        i += 2
        stop = False
        for n in primes:
            if i % n == 0:
                stop = True
                break
        if stop == False:
            found = True
    return i

def count_divisors():
    count = 1
    for k,v in sorted(prime_factor.items()):
        count *= (v + 1)
    if count > divisors:
        return True
    else:
        return False

def make_next_n_with_d():


def triangle():
    copy_factors = prime_factors
    number = 
    copy = number
    sub = 0
    while copy > 0:
        sub += 1
        number -= sub
    if copy == 0:
        print(number)


make_next_n_with_d()

while triangle()
    
