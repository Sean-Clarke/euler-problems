import math

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number
# to have over five divisors.

# What is the value of the first triangle number
# to have over five hundred divisors?


# Solution 1:
# -----------
#
# triangle = 3
# add = 3
# count = 2
#
# while count <= 500:
#     count = 1
#     triangle += add
#     add += 1
#     if triangle % 2 == 0:
#         count += 1
#         if triangle % 4 == 0:
#             count += 1
#             if triangle % 8 == 0:
#                 count += 1
#         if triangle % 6 == 0:
#             count += 1
#     if triangle % 3 == 0:
#         count += 1
#         if triangle % 9 == 0:
#             count += 1
#     if triangle % 5 == 0:
#         count += 1
#         if triangle % 10 == 0:
#             count += 1
#     if triangle % 7 == 0:
#         count += 1
#     for i in range(1, int(triangle / 11) + 1):
#         if triangle % i == 0:
#             count += 1
# 
# print(triangle)


# Solution 2:
# -----------
#
# list_of_primes = [2, 3]
# prime_factor = {}
# triangle = 6
# copy = triangle
# add = 4
# count = 2
# last_prime = 3
#
#
# def next_prime(i):
#     found = False
#     while found == False:
#         i += 2
#         stop = False
#         for n in list_of_primes:
#             if i % n == 0:
#                 stop = True
#                 break
#         if stop == False:
#             found = True
#     return i
#
# while count <= 500:
#     triangle += add
#     add += 1
#     while (last_prime < int(triangle / 2)):
#         last_prime = next_prime(last_prime)
#         list_of_primes.append(last_prime)
#     copy = triangle
#     prime_factor = {}
#     for n in list_of_primes:
#         exp = 0
#         while copy % n == 0:
#             exp += 1
#             copy /= n
#         if exp >= 1:
#             prime_factor[n] = exp
#     count = 1
#     for k,v in sorted(prime_factor.items()):
#         count *= (v + 1)
#    
# print(triangle)
            

# Solution 3: This solution is incomplete, however, I believe an answer along
# its ideas (ie. creating numbers with 500 divisors by building up from prime
# factorization) will be the fastest possible solution uponfurther scaling.
# -----------

# divisors = 500
# count = 1
# primes = [2, 3]
# last_prime = 3
# prime_factors = {}

# def find_prime_factorization(n):
#     i = 2
#     factors = {}
#     while i * i <= n:
#         if n % i:
#             i += 1
#         else:
#             n //= i
#             if i in factors:
#                 factors[i] += 1
#             else:
#                 factors[i] = 1
#     if n > 1:
#         if n in factors:
#             factors[n] += 1
#         else:
#             factors[n] = 1
#     return factors

# def next_prime(i):
#     found = False
#     while found == False:
#         i += 2
#         stop = False
#         for n in primes:
#             if i % n == 0:
#                 stop = True
#                 break
#         if stop == False:
#             found = True
#     return i

# def count_divisors(pf):
#     count = 1
#     for k,v in sorted(pf.items()):
#         if (v > 0):
#             count *= (v + 1)
#     if count > divisors:
#         return True
#     else:
#         return False

# def make_first_n_with_d(div):
#     n = 2
#     primes = {2:1}
#   
#     newPrimeCon = True
#     for k,v in sorted(primes.items()):
#         if (v == 0):
#             newPrimeCon = False
#     if (newPrimeCon == True):
#         for k,v in sorted(primes.items()):
#             if not (k**(v+1) > next(iter(primes))):
#                 newPrimeCon = False
#     if (newPrimeCon == True):
#         primes[next_prime(primes.keys()[-1])] = 1
#     else:
#         print("work with what you have")
#     
#     if (count_divisors(primes) >= 500): 
#         return n

# def is_triangle(n):
#     sub = 0
#     while n > 0:
#         sub += 1
#         n -= sub
#     if n == 0:
#         return True
#     else:
#         return False

# n = make_first_n_with_d(divisors)


# Solution 4:
# -----------

def find_prime_factorization(n):
    i = 2
    factors = {}
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            if i in factors:
                factors[i] += 1
            else:
                factors[i] = 1
    if n > 1:
        if n in factors:
            factors[n] += 1
        else:
            factors[n] = 1
    return factors

def count_divisors(n):
    pf = find_prime_factorization(n)
    count = 1
    for k,v in sorted(pf.items()):
        if (v > 0):
            count *= (v + 1)
    return(count)

def triangle_to_divisors(d):
    t = 1
    count = 2
    while count_divisors(t) < d:
        t += count
        count += 1
        print(t)
    return t

print(triangle_to_divisors(500))
